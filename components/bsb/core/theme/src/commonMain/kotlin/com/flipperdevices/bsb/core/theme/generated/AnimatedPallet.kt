package com.flipperdevices.bsb.core.theme.generated

import androidx.compose.animation.animateColorAsState
import androidx.compose.animation.core.AnimationSpec
import androidx.compose.animation.core.tween
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color
import com.flipperdevices.bsb.core.theme.generated.BusyBarPallet.Black
import com.flipperdevices.bsb.core.theme.generated.BusyBarPallet.Bluetooth
import com.flipperdevices.bsb.core.theme.generated.BusyBarPallet.Brand
import com.flipperdevices.bsb.core.theme.generated.BusyBarPallet.Danger
import com.flipperdevices.bsb.core.theme.generated.BusyBarPallet.Neutral
import com.flipperdevices.bsb.core.theme.generated.BusyBarPallet.Success
import com.flipperdevices.bsb.core.theme.generated.BusyBarPallet.Surface
import com.flipperdevices.bsb.core.theme.generated.BusyBarPallet.Transparent
import com.flipperdevices.bsb.core.theme.generated.BusyBarPallet.Transparent.BlackInvert
import com.flipperdevices.bsb.core.theme.generated.BusyBarPallet.Transparent.WhiteInvert
import com.flipperdevices.bsb.core.theme.generated.BusyBarPallet.Warning
import com.flipperdevices.bsb.core.theme.generated.BusyBarPallet.White
import com.flipperdevices.bsb.core.theme.generated.BusyBarPallet.Wifi
import kotlin.Int
import kotlin.Suppress

private const val ANIMATION_DURATION_MS: Int = 750

private val animationSpec: AnimationSpec<Color> = tween(ANIMATION_DURATION_MS)

@Composable
private fun animatedColor(targetValue: Color): Color = animateColorAsState(
    targetValue =
    targetValue,
    animationSpec = animationSpec
).value

/**
 * Autogenerated code from https://github.com/LionZXY/FlipperPalletGenerator/
 */
@Suppress("LongMethod")
@Composable
internal fun BusyBarPallet.toAnimatePallet(): BusyBarPallet = BusyBarPallet(
    black = Black(
        invert = animatedColor(black.invert),
        onColor = animatedColor(black.onColor)
    ),
    white = White(
        invert = animatedColor(white.invert),
        onColor = animatedColor(white.onColor)
    ),
    transparent = Transparent(
        blackInvert = BlackInvert(
            primary = animatedColor(transparent.blackInvert.primary),
            secondary = animatedColor(transparent.blackInvert.secondary),
            tertiary = animatedColor(transparent.blackInvert.tertiary),
            quaternary = animatedColor(transparent.blackInvert.quaternary),
            quinary = animatedColor(transparent.blackInvert.quinary)
        ),
        whiteInvert = WhiteInvert(
            primary = animatedColor(transparent.whiteInvert.primary),
            secondary = animatedColor(transparent.whiteInvert.secondary),
            tertiary = animatedColor(transparent.whiteInvert.tertiary),
            quaternary = animatedColor(transparent.whiteInvert.quaternary),
            quinary = animatedColor(transparent.whiteInvert.quinary)
        )
    ),
    neutral = Neutral(
        primary = animatedColor(neutral.primary),
        secondary = animatedColor(neutral.secondary),
        tertiary = animatedColor(neutral.tertiary),
        quaternary = animatedColor(neutral.quaternary),
        quinary = animatedColor(neutral.quinary),
        senary = animatedColor(neutral.senary),
        septenary = animatedColor(neutral.septenary)
    ),
    surface = Surface(
        primary = animatedColor(surface.primary),
        secondary = animatedColor(surface.secondary),
        tertiary = animatedColor(surface.tertiary)
    ),
    brand = Brand(
        primary = animatedColor(brand.primary),
        secondary = animatedColor(brand.secondary),
        tertiary = animatedColor(brand.tertiary)
    ),
    bluetooth = Bluetooth(
        primary = animatedColor(bluetooth.primary),
        secondary = animatedColor(bluetooth.secondary),
        tertiary = animatedColor(bluetooth.tertiary)
    ),
    wifi = Wifi(
        primary = animatedColor(wifi.primary),
        secondary = animatedColor(wifi.secondary),
        tertiary = animatedColor(wifi.tertiary)
    ),
    success = Success(
        primary = animatedColor(success.primary),
        secondary = animatedColor(success.secondary),
        tertiary = animatedColor(success.tertiary)
    ),
    danger = Danger(
        primary = animatedColor(danger.primary),
        secondary = animatedColor(danger.secondary),
        tertiary = animatedColor(danger.tertiary)
    ),
    warning = Warning(
        primary = animatedColor(warning.primary),
        secondary = animatedColor(warning.secondary),
        tertiary = animatedColor(warning.tertiary)
    )
)
